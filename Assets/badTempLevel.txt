	AssetManager* am = AssetManager::Get();

	LoadStartingShadersMaterials(am);

	Texture* texture = new Texture("Assets/companioncube.png");
	Texture* texture2 = new Texture("Assets/wall.jpg");
	Texture* texture3 = new Texture("Assets/container2.png");
	Texture* texture4 = new Texture("Assets/container2_specular.png");
	texture4->SetType(TextureType::Specular);

	am->SaveTexture("Assets/companioncube.png", texture);
	am->SaveTexture("Assets/wall.jpg", texture2);
	am->SaveTexture("Assets/container2.png", texture3);
	am->SaveTexture("Assets/container2_specular.png", texture4);

	Entity3D* squidward = new Entity3D("Assets/models/Squidward/squidward.obj");
	squidward->SetPosition(glm::vec3(-8.75f, -5.0, 0.0f));
	squidward->SetScale(0.15);
	AddGameEntity(squidward);

	PointLight* pointLight = AllocatePointLight(glm::vec4(1.0f, 1.0f, 1.0f, 1.0f), lightPosition, 1.0f, 0.09f, 0.032f);
	pointLight->GetLightSphere()->SetMaterial(new Material(*am->LoadMaterial("color")));
	AddGameEntity(pointLight->GetLightSphere());

	DirectionalLight* dirLight = AllocateDirectionalLight(glm::vec4(1.0f, 1.0f, 1.0f, 1.0f), glm::vec3(-0.2f, -1.0f, -0.3f));
	dirLight->mData.diffuseIntensity = 0.5f;
	dirLight->mData.specularIntensity = 0.5f;

	SpotLight* spotLight = AllocateSpotLight(glm::vec4(0.25f, 0.61f, 1.0f, 1.0f), glm::vec3(-0.7f, 3.0, 0.0f), glm::vec3(0.0, -1.0f, 0.0f),
		glm::cos(glm::radians(12.5f)), glm::cos(glm::radians(16.0f)), 1.0f, 0.09f, 0.032f);
	spotLight->GetLightSphere()->SetMaterial(new Material(*am->LoadMaterial("color")));
	AddGameEntity(spotLight->GetLightSphere());

	Material* planeMat = new Material(*am->LoadMaterial("textured"));
	planeMat->SetSpecularIntensity(0.1f);
	Plane* plane = new Plane();
	plane->SetMaterial(planeMat);
	plane->SetPosition(glm::vec3(0.0f, -5.0f, 1.0f));
	plane->SetScale(50.0f);
	plane->SetPitch(-90.0f);
	AddGameEntity(plane);

	mCamera = new Camera();
	mCamera->SetPosition(glm::vec3(0.0f, 0.0f, 3.0f));

	glm::vec3 objectPositions[] = {
		glm::vec3(0.0f,  0.0f,  0.0f),
		glm::vec3(2.0f,  5.0f, -15.0f),
		glm::vec3(-1.5f, -2.2f, -2.5f),
		glm::vec3(-3.8f, -2.0f, -12.3f),
		glm::vec3(2.4f, -0.4f, -3.5f),
		glm::vec3(-1.7f,  3.0f, -7.5f),
		glm::vec3(1.3f, -2.0f, -2.5f),
		glm::vec3(1.5f,  2.0f, -2.5f),
		glm::vec3(1.5f,  0.2f, -1.5f),
		glm::vec3(-1.3f,  1.0f, -1.5f)
	};

	// Create new objects
	for (int i = 0; i < 10; ++i)
	{
		Cube* object = new Cube();
		object->SetPosition(objectPositions[i]);
		object->SetScale(0.5f);
		Material* mat = new Material(*am->LoadMaterial("textured"));
		if (i == 3 || i == 7)
		{
			mat->SetSpecularIntensity(0.5f);
			mat->AddTexture(texture);
		}
		else
		{
			mat->SetSpecularIntensity(5.0f);
			mat->AddTexture(texture3);
			mat->AddTexture(texture4);
		}
		object->SetMaterial(mat);
		object->SetYaw(25.0f);
		TimerComponent* timer = new TimerComponent(object);
		AddGameEntity(object);
	}

	Texture* window = new Texture("Assets/transparent_window.png");
	am->SaveTexture("window", window);

	Texture* grass = new Texture("Assets/grass.png");
	am->SaveTexture("grass", grass);

	Plane* grassPlane = new Plane();
	grassPlane->SetPosition(glm::vec3(-5.0f, -4.5f, 0.0f));
	Material* grassMat = new Material(*am->LoadMaterial("textured"));
	grassMat->AddTexture(grass);
	grassPlane->SetMaterial(grassMat);
	AddGameEntity(grassPlane);

	Plane* windowPlane = new Plane();
	windowPlane->SetPosition(glm::vec3(-5.0f, -4.5f, 1.8f));
	Material* windowMat = new Material(*am->LoadMaterial("textured"));
	windowMat->AddTexture(window);
	windowPlane->SetMaterial(windowMat);
	AddGameEntity(windowPlane);

	Plane* windowPlane2 = new Plane();
	windowPlane2->SetPosition(glm::vec3(-5.3f, -4.5f, 1.6f));
	Material* windowMat2 = new Material(*am->LoadMaterial("textured"));
	windowMat2->AddTexture(window);
	windowPlane2->SetMaterial(windowMat2);
	AddGameEntity(windowPlane2);


	// SPONZA


	AssetManager* am = AssetManager::Get();

	LoadStartingShadersMaterials(am);

	Entity3D* sponza = new Entity3D("Assets/models/Sponza/sponza.obj");
	sponza->SetPosition(glm::vec3(-8.75f, -5.0, 0.0f));
	sponza->SetScale(0.15);
	sponza->SetYaw(-90.0f);
	AddGameEntity(sponza);

	mCamera = new Camera();
	mCamera->SetPosition(glm::vec3(0.0f, 0.0f, 3.0f));

	DirectionalLight* dirLight = AllocateDirectionalLight(glm::vec4(1.0f, 1.0f, 1.0f, 1.0f), glm::vec3(-0.2f, -1.0f, -0.3f));
	dirLight->mData.diffuseIntensity = 1.0f;
	dirLight->mData.specularIntensity = 0.5f;